import random

def nwd(a, b):
    while b:
        a, b = b, a%b
    return a

def euklides(n, x):
    a, b, u, v = n, x, 0, 1
    while b != 0:
        q = a // b
        a, b = b, a + (-q * b)
        u, v = v, u + (-q * v)
    d = a
    v = (d - x * u) // n
    return u, v, d


def zadanie1(n, b):
    '''
    Zaimplementuj algorytm (funkcję) obliczania odwrotności w grupie Φ(n). Wyko-
    rzystaj Rozszerzony Algorytm Euklidesa.
    '''
    g, x, y = euklides(n, b)
    if y == 1:
        return g % n
    else:
        return False

def zadanie2(x, k, p):
    '''
    Zaimplementuj algorytm (funkcję) efektywnego potęgowania w zbiorze Z ∗ n . Wyko-
    rzystaj algorytm iterowanego podnoszenia do kwadratu.
    '''
    a = 1
    b = x

    while k > 0:
        if k % 2 == 1:
            a = (a * b) % p
        b = (b * b) % p
        k = k // 2

    return a

def zadanie3(n):
    '''
    Zaimplementuj test (funkcję), który sprawdza liczba naturalna n jest liczbą pierw-
    szą. Wykorzystaj test Fermata
    '''
    temp = []
    for x in range(0, 10):
        b = random.randint(2, n - 1)
        if nwd(b, n) == 1:
            temp.append(b)
    for x in temp:
        if (zadanie2(n, (n - 1), x)) != 1:
            return False
    return True

def zadanie4(b, p):
    '''
    Niech p będzie liczbą pierwszą. Zaimplementuj test (funkcję), który sprawdza czy
    element zbioru Z ∗ p jest resztą kwadratową w Z ∗ p . Wykorzystaj twierdzenie Eulera.
    '''
    ls = zadanie2(b, ((p - 1) // 2), p)
    return True if ls == 1 else False

def zadanie5(b, p):
    '''
    Niech p ≡ 3 (mod 4) będzie liczbą pierwszą. Zaimplementuj funkcję, która oblicza
    pierwiastek kwadratowy w Φ(p). Wykorzystaj twierdzenie Eulera.
    '''
       return zadanie2(b, ((p + 1) // 4), p)

if __name__ == "__main__":
    n = 393847041276178206491396243212274945872070776985043237184044451747690284405703994938020592656894726519747568678264497623311685635604918597230323269556886420453871930400418329075629418384691272372863859327955756407280218398219170544142787007265395975232901233778590659508114573048528189504436995545652
    a = 114490559043126076738153358744966087681953386182425573483404112031815201175394209446530718026054824536822393073768479394115941549919359895111725996451157521700161443180727996657988659990597046662665463765926411024939606661260667863176902524560156078905991604769638931779122326545032024160910696661027
    b = 391391460710934952447744356920347432818302403303325591886976492807319896968025226937614034635791513888335717473023250182271798945302849615194243154049546831368896945330379987670475241933068594152537330597969762722659261563190456905695749170316137931922395119952663460471204126820352679225013665046771    # print(binaryPower_ltor(114490559043126076738153358744966087681953386182425573483404112031815201175394209446530718026054824536822393073768479394115941549919359895111725996451157521700161443180727996657988659990597046662665463765926411024939606661260667863176902524560156078905991604769638931779122326545032024160910696661027,391391460710934952447744356920347432818302403303325591886976492807319896968025226937614034635791513888335717473023250182271798945302849615194243154049546831368896945330379987670475241933068594152537330597969762722659261563190456905695749170316137931922395119952663460471204126820352679225013665046771,393847041276178206491396243212274945872070776985043237184044451747690284405703994938020592656894726519747568678264497623311685635604918597230323269556886420453871930400418329075629418384691272372863859327955756407280218398219170544142787007265395975232901233778590659508114573048528189504436995545652))
