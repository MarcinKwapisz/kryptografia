import random
import time

def effective_power(b: int, k: int, n: int):
    y = 1
    binary = list(reversed(bin(k)[2:]))
    i = len(binary) - 1
    while i >= 0:
        y = (y ** 2) % n
        if binary[i] == "1":
            y = (y * b) % n
        i = i - 1
    return y


def fermat_test(x):
    return effective_power(2, x-1, x) == 1


def gen_number_alt(k):
    sum = 0
    multiply_by = 1
    i = 0
    while i < k:
        sum += random.choice([0, 1]) * multiply_by
        multiply_by = multiply_by * 2
        i += 1
    return sum


def nwd(a, b):
    while b > 0:
        reszta = a % b
        a = b
        b = reszta
    return a


def check_if_in_set(n, b):
    A = n
    B = b
    U = 0
    V = 1
    while B != 0:
        q = A // B
        temp = A
        A = B
        B = temp + (-q * B)
        temp = U
        U = V
        V = temp + (-q * V)
    if U < 0:
        return n + U
    return U


bits = 2000
# generowanie q --------------------------------------------------------
start_time = time.time()
# q = 9011254356999291115162365327949498423961806626909132678605933778054022919572516438689068320232979487290250594777481165417082537524008800854001777302052283081045489746922244030318856849466485287290445612537009429437211005391606703078744334639611957442607245638100583136714102096377750007354299210685977
q = gen_number_alt(bits)
# q = random.getrandbits(bits)
while not fermat_test(q):
    q = gen_number_alt(bits)
    # q = random.getrandbits(bits)
#     print(q)
print("q = ", q)
print("found q after %s seconds" % (time.time() - start_time))

# generowanie p ---------------------------------------------------------
start_time = time.time()
# p = 10093894289563236012036659544535684605293396786124647729369212584817800329280775763805380276312396553210696813147332574051021061961588360563406457147751828067524467901706644289128336317849305505083942298728419703505903326353885734999630447884900955714051192945234921608882465636134639272754752023817347
p = gen_number_alt(bits)
# p = random.getrandbits(bits)
while not fermat_test(p):
    p = gen_number_alt(bits)
    # p = random.getrandbits(bits)
    # print(p)

print("p = ", p)
print("found p after %s seconds" % (time.time() - start_time))
# obliczenie n ----------------------------------------------------------

n = p*q

# obliczanie fi ---------------------------------------------------------

# fi = 90958648895916974731870094186474935055876599407678102532034039508726807844974652879734492428454567071296993985133513612606117831886300018430080130534642990580821783575767819848524853411384908120442477278916973191060257584667608228720903392407746841609917465648450940983626303650579785481169402107628620190867213426748116266099543209245358626975147963256789315673155152277154584134557910438055584020363631115898960891563909564481271390979810430308425551022646071937310439269814670514306810349863305395224097629115421961663754290939823229611797219673928806039304047580255581222561093773022646386787739696
fi = (p-1) * (q-1)
print("fi = ", fi)

# obliczanie e ----------------------------------------------------------

# e = 58094540542784758079593399021250431448142447043661401502304378729995532262798334887838467407699551201410984582102772274168965050153175081972226094801301359347028240571619340583843598680878202043066253424962408313723354887390531007704093477388741946540421700209102214029357331934878046254944851985804430686024295374010986295253552861454062998519247030647132801573513826813350566395814358298598416757939457275959913559907127649993240028772720636642680858842231616628934139940913638342866884621856206316937806657112753645793909411222970092134460483878485878979124300555735893637393817682093944608332642891
maks = q
if(p>q):
    maks = q

e = random.randint(maks, fi)
flag = True
print(e)
if nwd(e, fi) == 1:
    flag = False
while(flag):
    e = random.randint(maks, fi)
    if nwd(e, fi) == 1:
        flag = False

print("e = ", e)

# obliczenie odwrotnosci e czyli d ----------------------------------------

# d = 10452241381685179874417738168142935790659478539159554900812155268727778379795028595179166230398318015111138017453088443536437186314700242678897835319655726200391528759662743861412794220172377497501714455250074284552628723273213566961046814012430614046275261592294618009345989718262376964366282690938476412498449565391049322607057290480981768210056649763204398168186926242260098971969754017738187271755407879350540593112191345864093284093117754242552932798390561640945111887130873709216455345336965614061021852336294234928039977456046434121234627960325238173109429818289572841925970661465514446098183235
d = check_if_in_set(fi, e)
print("d = ", d)

# wpisanie wiadomości do zaszyfrowania M
M = 54321

# obliczenie szyfrogramu C podnoszac M do potegi e mod n
C = effective_power(M, e, n)
print("szyfrogram C = ", C)

# deszyfrowanie podnosząc C do potęgi d mod n aby otrzymac M
print("zdeszyfrowana wiadomosc = ", effective_power(C, d, n))

# deszyfrowanie CRT
u = (p ^ -1) % q
Cp = C % p
Cq = C % q
dp = d % (p-1)
dq = d % (q-1)
Mp = effective_power(Cp, dp, p)
Mq = effective_power(Cq, dq, q)
print("zdeszyfrowana wiadomosc CRT = ", (Mp + p*(Mq - Mp)*u) % n)
